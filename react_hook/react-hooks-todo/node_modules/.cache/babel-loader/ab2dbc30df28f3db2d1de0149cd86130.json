{"ast":null,"code":"var _jsxFileName = \"D:\\\\MyFile\\\\react-hooks-todo\\\\src\\\\components\\\\TodoList\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useReducer } from \"react\";\nimport IdInput from './Input';\nimport TdList from \"./List\";\nimport { todoReducer } from './reducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  todoList: []\n};\n\nconst TodoList = () => {\n  _s();\n\n  // const [todoList, setTodoList] = useState<ITodo[]>([])\n  const [state, dispatch] = useReducer(todoReducer, initialState);\n  useEffect(() => {\n    console.log(state.todoList);\n  }, [state.todoList]);\n  const addTodo = useCallback(todo => {\n    // setTodoList(todoList => [...todoList, todo]);\n    dispatch({});\n  }, []); // 父组件更新 子组件并没有更新的时候 这个函数 会重新生成一次\n  //  如果子组件的方法是父组件传过来的话 都用useCallback包一下\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-list\",\n    children: [/*#__PURE__*/_jsxDEV(IdInput, {\n      addTodo: addTodo,\n      todoList: state.todoList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TdList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TodoList, \"mZpQ/cOYBRETaSOLSF/aJGxzrbM=\");\n\n_c = TodoList;\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["D:/MyFile/react-hooks-todo/src/components/TodoList/index.tsx"],"names":["React","useEffect","useCallback","useReducer","IdInput","TdList","todoReducer","initialState","todoList","TodoList","state","dispatch","console","log","addTodo","todo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,SAApB,EAA6CC,WAA7C,EAA0DC,UAA1D,QAA4E,OAA5E;AAEA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SAAQC,WAAR,QAA0B,WAA1B;;AAEA,MAAMC,YAAmB,GAAG;AACxBC,EAAAA,QAAQ,EAAC;AADe,CAA5B;;AAIA,MAAMC,QAAY,GAAG,MAAoB;AAAA;;AAErC;AAEA,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAmBR,UAAU,CAACG,WAAD,EAAaC,YAAb,CAAnC;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACF,QAAlB;AACH,GAFQ,EAEN,CAACE,KAAK,CAACF,QAAP,CAFM,CAAT;AAIA,QAAMM,OAAO,GAAGZ,WAAW,CAAEa,IAAD,IAAiB;AACzC;AACAJ,IAAAA,QAAQ,CAAC,EAAD,CAAR;AAGH,GAL0B,EAKxB,EALwB,CAA3B,CATqC,CAerC;AACA;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI,QAAC,OAAD;AACI,MAAA,OAAO,EAAEG,OADb;AAEI,MAAA,QAAQ,EAAEJ,KAAK,CAACF;AAFpB;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA1BD;;GAAMC,Q;;KAAAA,Q;AA2BN,eAAeA,QAAf","sourcesContent":["import React, { FC, useEffect, ReactElement, useCallback, useReducer } from \"react\";\r\n\r\nimport IdInput from './Input'\r\nimport TdList from \"./List\";\r\nimport { ITodo ,IState} from \"./typings\"\r\nimport {todoReducer} from './reducer'\r\n\r\nconst initialState:IState = {\r\n    todoList:[]\r\n}\r\n\r\nconst TodoList: FC = (): ReactElement => {\r\n\r\n    // const [todoList, setTodoList] = useState<ITodo[]>([])\r\n\r\n    const [state,dispatch] = useReducer(todoReducer,initialState)\r\n    useEffect(() => {\r\n        console.log(state.todoList)\r\n    }, [state.todoList])\r\n\r\n    const addTodo = useCallback((todo: ITodo) => {\r\n        // setTodoList(todoList => [...todoList, todo]);\r\n        dispatch({\r\n            \r\n        })\r\n    }, [])\r\n    // 父组件更新 子组件并没有更新的时候 这个函数 会重新生成一次\r\n    //  如果子组件的方法是父组件传过来的话 都用useCallback包一下\r\n    return (\r\n        <div className=\"todo-list\">\r\n            <IdInput\r\n                addTodo={addTodo}\r\n                todoList={state.todoList}\r\n            />\r\n            <TdList />\r\n        </div>\r\n    )\r\n}\r\nexport default TodoList"]},"metadata":{},"sourceType":"module"}