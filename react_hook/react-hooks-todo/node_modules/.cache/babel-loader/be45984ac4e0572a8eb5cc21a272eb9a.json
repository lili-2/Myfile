{"ast":null,"code":"var _jsxFileName = \"D:\\\\MyFile\\\\react-hooks-todo\\\\src\\\\components\\\\TodoList\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useReducer } from \"react\";\nimport IdInput from './Input';\nimport TdList from \"./List\";\nimport { ACTION_TYPE } from \"./typings\";\nimport { todoReducer } from './reducer'; //惰性初始化\n// const initialState: IState = {\n//     todoList: []\n// }\n//可以用函数去创建一个state出来 他不执行是没有state的\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction init(initTodoList) {\n  return {\n    todoList: initTodoList\n  };\n}\n\nconst TodoList = () => {\n  _s();\n\n  // const [todoList, setTodoList] = useState<ITodo[]>([])\n  //reducer 可以传入第三个参数 当useReducer\n  const [state, dispatch] = useReducer(todoReducer, [], init);\n  useEffect(() => {\n    console.log(state.todoList);\n  }, [state.todoList]);\n  const addTodo = useCallback(todo => {\n    // setTodoList(todoList => [...todoList, todo]);\n    dispatch({\n      type: ACTION_TYPE.ADD_TODO,\n      payload: todo\n    });\n  }, []);\n  const removeTodo = useCallback(id => {\n    dispatch({\n      type: ACTION_TYPE.REMOVE_TODO,\n      payload: id\n    });\n  }, []);\n  const toggleTodo = useCallback(id => {\n    dispatch({\n      type: ACTION_TYPE.TOGGLE_TODO,\n      payload: id\n    });\n  }, []); // 父组件更新 子组件并没有更新的时候 这个函数 会重新生成一次\n  //  如果子组件的方法是父组件传过来的话 都用useCallback包一下\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todo-list\",\n    children: [/*#__PURE__*/_jsxDEV(IdInput, {\n      addTodo: addTodo,\n      todoList: state.todoList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TdList, {\n      todoList: state.todoList,\n      removeTodo: removeTodo,\n      toggleTodo: toggleTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TodoList, \"4P/g7EiJC2bQYlr8pTnlfA9GPwA=\");\n\n_c = TodoList;\nexport default TodoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"sources":["D:/MyFile/react-hooks-todo/src/components/TodoList/index.tsx"],"names":["React","useEffect","useCallback","useReducer","IdInput","TdList","ACTION_TYPE","todoReducer","init","initTodoList","todoList","TodoList","state","dispatch","console","log","addTodo","todo","type","ADD_TODO","payload","removeTodo","id","REMOVE_TODO","toggleTodo","TOGGLE_TODO"],"mappings":";;;AAAA,OAAOA,KAAP,IAAoBC,SAApB,EAA6CC,WAA7C,EAA0DC,UAA1D,QAA4E,OAA5E;AAEA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAAwBC,WAAxB,QAA2C,WAA3C;AACA,SAASC,WAAT,QAA4B,WAA5B,C,CAEA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,IAAT,CAAeC,YAAf,EAA6C;AACzC,SAAO;AACHC,IAAAA,QAAQ,EAAED;AADP,GAAP;AAGH;;AACD,MAAME,QAAY,GAAG,MAAoB;AAAA;;AAErC;AAEA;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,UAAU,CAACI,WAAD,EAAc,EAAd,EAAiBC,IAAjB,CAApC;AACAP,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACF,QAAlB;AACH,GAFQ,EAEN,CAACE,KAAK,CAACF,QAAP,CAFM,CAAT;AAIA,QAAMM,OAAO,GAAGd,WAAW,CAAEe,IAAD,IAAuB;AAC/C;AACAJ,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEZ,WAAW,CAACa,QADb;AAELC,MAAAA,OAAO,EAAEH;AAFJ,KAAD,CAAR;AAIH,GAN0B,EAMxB,EANwB,CAA3B;AAQA,QAAMI,UAAU,GAAGnB,WAAW,CAAEoB,EAAD,IAAoB;AAC3CT,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEZ,WAAW,CAACiB,WADb;AAELH,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAIH,GALyB,EAKxB,EALwB,CAA9B;AAQA,QAAME,UAAU,GAAGtB,WAAW,CAAEoB,EAAD,IAAoB;AAC3CT,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEZ,WAAW,CAACmB,WADb;AAELL,MAAAA,OAAO,EAAEE;AAFJ,KAAD,CAAR;AAIP,GAL6B,EAK5B,EAL4B,CAA9B,CA1BqC,CAiCrC;AACA;;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACI,QAAC,OAAD;AACI,MAAA,OAAO,EAAEN,OADb;AAEI,MAAA,QAAQ,EAAEJ,KAAK,CAACF;AAFpB;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI,QAAC,MAAD;AACI,MAAA,QAAQ,EAAEE,KAAK,CAACF,QADpB;AAEI,MAAA,UAAU,EAAIW,UAFlB;AAGI,MAAA,UAAU,EAAIG;AAHlB;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAhDD;;GAAMb,Q;;KAAAA,Q;AAiDN,eAAeA,QAAf","sourcesContent":["import React, { FC, useEffect, ReactElement, useCallback, useReducer } from \"react\";\r\n\r\nimport IdInput from './Input'\r\nimport TdList from \"./List\";\r\nimport { ITodo, IState, ACTION_TYPE } from \"./typings\"\r\nimport { todoReducer } from './reducer'\r\n\r\n//惰性初始化\r\n// const initialState: IState = {\r\n//     todoList: []\r\n// }\r\n//可以用函数去创建一个state出来 他不执行是没有state的\r\nfunction init (initTodoList: ITodo[]): IState{\r\n    return {\r\n        todoList: initTodoList\r\n    }\r\n}\r\nconst TodoList: FC = (): ReactElement => {\r\n\r\n    // const [todoList, setTodoList] = useState<ITodo[]>([])\r\n\r\n    //reducer 可以传入第三个参数 当useReducer\r\n    const [state, dispatch] = useReducer(todoReducer, [],init)\r\n    useEffect(() => {\r\n        console.log(state.todoList)\r\n    }, [state.todoList])\r\n\r\n    const addTodo = useCallback((todo: ITodo): void => {\r\n        // setTodoList(todoList => [...todoList, todo]);\r\n        dispatch({\r\n            type: ACTION_TYPE.ADD_TODO,\r\n            payload: todo\r\n        })\r\n    }, [])\r\n\r\n    const removeTodo = useCallback((id:number): void=> {\r\n            dispatch({\r\n                type: ACTION_TYPE.REMOVE_TODO,\r\n                payload: id\r\n            })\r\n        },[],\r\n    )\r\n\r\n    const toggleTodo = useCallback((id:number): void=> {\r\n            dispatch({\r\n                type: ACTION_TYPE.TOGGLE_TODO,\r\n                payload: id\r\n            })\r\n    },[],\r\n)\r\n    // 父组件更新 子组件并没有更新的时候 这个函数 会重新生成一次\r\n    //  如果子组件的方法是父组件传过来的话 都用useCallback包一下\r\n    return (\r\n        <div className=\"todo-list\">\r\n            <IdInput\r\n                addTodo={addTodo}\r\n                todoList={state.todoList}\r\n            />\r\n            <TdList\r\n                todoList={state.todoList}\r\n                removeTodo = {removeTodo}\r\n                toggleTodo = {toggleTodo}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default TodoList"]},"metadata":{},"sourceType":"module"}