{"ast":null,"code":"var _jsxFileName = \"/run/media/lin/Data/MyFile/react2/redux/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux'; // 1. store 存取数据的仓库 const store = createStore(reducer)\n// 2. state 在数据仓库中存储的数据 获取快照 store.getState() 查看数据状态\n// 3. action 对象 描述现在如何操作数据\n// const action = {\n//   type: 'ADD_ONE',\n//   num: 1\n// }\n// const action = {\n//   type: 'ADD_TWO',\n//   num: 2\n// }\n// 4. dispatch 唯一能更改state的方法 store.dispatch(action)\n// 5. reducer 函数 返回一个更新的state\n// const reducer = (state = 10,action) => {\n//   switch(action.type){\n//     case 'ADD_ONE':\n//       return state + action.num;\n//     case 'ADD_two':\n//       return state + action.num;\n//   }\n// }\n// function App(){\n//   return (\n//     <div>123</div>\n//   )\n// }\n\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  const addOne = {\n    type: 'Add',\n    num: 1\n  };\n  const addTwo = {\n    type: 'ADD',\n    num: 2\n  };\n  const square = {\n    type: 'SQUARE'\n  };\n\n  const reducer = (state = 10, action) => {\n    switch (action.type) {\n      case 'ADD':\n        return state + action.num;\n\n      case 'SQUARE':\n        return state * state;\n\n      default:\n        return state;\n    }\n  };\n\n  const store = createStore(reducer);\n  console.log(store.getState()); //每一次都会进入reducer\n\n  console.log(store.dispatch(addOne)); //传进去action\n\n  console.log(store.getState());\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"123\"\n  }, void 0, false);\n}\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 76,\n  columnNumber: 3\n}, this), document.getElementById('root'));\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/run/media/lin/Data/MyFile/react2/redux/src/index.js"],"names":["React","ReactDOM","createStore","App","addOne","type","num","addTwo","square","reducer","state","action","store","console","log","getState","dispatch","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAAQC,WAAR,QAA0B,OAA1B,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AAEA,SAASC,GAAT,GAAc;AACZ,QAAMC,MAAM,GAAG;AACbC,IAAAA,IAAI,EAAE,KADO;AAEbC,IAAAA,GAAG,EAAE;AAFQ,GAAf;AAKA,QAAMC,MAAM,GAAG;AACbF,IAAAA,IAAI,EAAE,KADO;AAEbC,IAAAA,GAAG,EAAE;AAFQ,GAAf;AAKA,QAAME,MAAM,GAAG;AACbH,IAAAA,IAAI,EAAE;AADO,GAAf;;AAIA,QAAMI,OAAO,GAAG,CAACC,KAAK,GAAG,EAAT,EAAYC,MAAZ,KAAuB;AACrC,YAAOA,MAAM,CAACN,IAAd;AACE,WAAK,KAAL;AACE,eAAOK,KAAK,GAAGC,MAAM,CAACL,GAAtB;;AACF,WAAK,QAAL;AACE,eAAOI,KAAK,GAAGA,KAAf;;AACF;AACE,eAAOA,KAAP;AANJ;AAQD,GATD;;AAWA,QAAME,KAAK,GAAGV,WAAW,CAACO,OAAD,CAAzB;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,EAAZ,EA5BY,CA4BkB;;AAE9BF,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACI,QAAN,CAAeZ,MAAf,CAAZ,EA9BY,CA8BuB;;AAEnCS,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,EAAZ;AACA,sBACE;AAAA;AAAA,mBADF;AAKD;;KAtCQZ,G;AAwCTF,QAAQ,CAACgB,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux';\n\n// 1. store 存取数据的仓库 const store = createStore(reducer)\n// 2. state 在数据仓库中存储的数据 获取快照 store.getState() 查看数据状态\n// 3. action 对象 描述现在如何操作数据\n\n// const action = {\n//   type: 'ADD_ONE',\n//   num: 1\n// }\n// const action = {\n//   type: 'ADD_TWO',\n//   num: 2\n// }\n// 4. dispatch 唯一能更改state的方法 store.dispatch(action)\n// 5. reducer 函数 返回一个更新的state\n\n// const reducer = (state = 10,action) => {\n//   switch(action.type){\n//     case 'ADD_ONE':\n//       return state + action.num;\n//     case 'ADD_two':\n//       return state + action.num;\n//   }\n// }\n\n// function App(){\n//   return (\n//     <div>123</div>\n//   )\n// }\n\nfunction App(){\n  const addOne = {\n    type: 'Add',\n    num: 1\n  }\n\n  const addTwo = {\n    type: 'ADD',\n    num: 2\n  }\n\n  const square = {\n    type: 'SQUARE'\n  }\n\n  const reducer = (state = 10,action) => {\n    switch(action.type){\n      case 'ADD':\n        return state + action.num\n      case 'SQUARE':\n        return state * state;\n      default:\n        return state;\n    }\n  }\n\n  const store = createStore(reducer);\n\n  console.log(store.getState());//每一次都会进入reducer\n\n  console.log(store.dispatch(addOne))//传进去action\n  \n  console.log(store.getState())\n  return (\n    <>\n      123\n    </>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}