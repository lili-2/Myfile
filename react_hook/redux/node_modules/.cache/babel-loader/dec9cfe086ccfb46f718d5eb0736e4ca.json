{"ast":null,"code":"var _jsxFileName = \"/run/media/lin/Data/MyFile/react2/redux/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { addAction, squareAction } from './actions/actions';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  const reducer = (state = 10, action) => {\n    switch (action.type) {\n      case 'ADD':\n        return state + action.num;\n\n      case 'SQUARE':\n        return state * state;\n\n      default:\n        return state;\n    }\n  };\n\n  const store = createStore(reducer);\n  console.log(store.getState()); //每一次都会进入reducer\n\n  console.log(store.dispatch(addAction(1))); //传进去action\n\n  console.log(store.getState());\n  console.log(store.dispatch(addTwo));\n  console.log(store.getState());\n  console.log(store.dispatch(square));\n  console.log(store.getState());\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: \"123\"\n  }, void 0, false);\n}\n\n_c = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 47,\n  columnNumber: 3\n}, this), document.getElementById('root')); // 1. store 存取数据的仓库 const store = createStore(reducer)\n// 2. state 在数据仓库中存储的数据 获取快照 store.getState() 查看数据状态\n// 3. action 对象 描述现在如何操作数据\n// const action = {\n//   type: 'ADD_ONE',\n//   num: 1\n// }\n// const action = {\n//   type: 'ADD_TWO',\n//   num: 2\n// }\n// 4. dispatch 唯一能更改state的方法 store.dispatch(action)\n// 5. reducer 函数 返回一个更新的state\n// const reducer = (state = 10,action) => {\n//   switch(action.type){\n//     case 'ADD_ONE':\n//       return state + action.num;\n//     case 'ADD_two':\n//       return state + action.num;\n//   }\n// }\n// function App(){\n//   return (\n//     <div>123</div>\n//   )\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/run/media/lin/Data/MyFile/react2/redux/src/index.js"],"names":["React","ReactDOM","createStore","addAction","squareAction","App","reducer","state","action","type","num","store","console","log","getState","dispatch","addTwo","square","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAAQC,WAAR,QAA0B,OAA1B;AACA,SACIC,SADJ,EAEIC,YAFJ,QAGQ,mBAHR;;;;AAKA,SAASC,GAAT,GAAc;AAGZ,QAAMC,OAAO,GAAG,CAACC,KAAK,GAAG,EAAT,EAAYC,MAAZ,KAAuB;AACrC,YAAOA,MAAM,CAACC,IAAd;AACE,WAAK,KAAL;AACE,eAAOF,KAAK,GAAGC,MAAM,CAACE,GAAtB;;AACF,WAAK,QAAL;AACE,eAAOH,KAAK,GAAGA,KAAf;;AACF;AACE,eAAOA,KAAP;AANJ;AAQD,GATD;;AAWA,QAAMI,KAAK,GAAGT,WAAW,CAACI,OAAD,CAAzB;AAEAM,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,EAAZ,EAhBY,CAgBkB;;AAE9BF,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACI,QAAN,CAAeZ,SAAS,CAAC,CAAD,CAAxB,CAAZ,EAlBY,CAkB6B;;AAEzCS,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,EAAZ;AAEAF,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACI,QAAN,CAAeC,MAAf,CAAZ;AAEAJ,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,EAAZ;AAEAF,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACI,QAAN,CAAeE,MAAf,CAAZ;AAEAL,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,QAAN,EAAZ;AAEA,sBACE;AAAA;AAAA,mBADF;AAKD;;KAnCQT,G;AAqCTJ,QAAQ,CAACiB,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux';\nimport {\n    addAction,\n    squareAction\n  }from './actions/actions'\n\nfunction App(){\n\n\n  const reducer = (state = 10,action) => {\n    switch(action.type){\n      case 'ADD':\n        return state + action.num\n      case 'SQUARE':\n        return state * state;\n      default:\n        return state;\n    }\n  }\n\n  const store = createStore(reducer);\n\n  console.log(store.getState());//每一次都会进入reducer\n\n  console.log(store.dispatch(addAction(1)))//传进去action\n  \n  console.log(store.getState())\n\n  console.log(store.dispatch(addTwo))\n\n  console.log(store.getState())\n\n  console.log(store.dispatch(square))\n\n  console.log(store.getState())\n\n  return (\n    <>\n      123\n    </>\n  )\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// 1. store 存取数据的仓库 const store = createStore(reducer)\n// 2. state 在数据仓库中存储的数据 获取快照 store.getState() 查看数据状态\n// 3. action 对象 描述现在如何操作数据\n\n// const action = {\n//   type: 'ADD_ONE',\n//   num: 1\n// }\n// const action = {\n//   type: 'ADD_TWO',\n//   num: 2\n// }\n// 4. dispatch 唯一能更改state的方法 store.dispatch(action)\n// 5. reducer 函数 返回一个更新的state\n\n// const reducer = (state = 10,action) => {\n//   switch(action.type){\n//     case 'ADD_ONE':\n//       return state + action.num;\n//     case 'ADD_two':\n//       return state + action.num;\n//   }\n// }\n\n// function App(){\n//   return (\n//     <div>123</div>\n//   )\n// }"]},"metadata":{},"sourceType":"module"}